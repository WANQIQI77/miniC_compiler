
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightQUESTIONCOLONleftPLUS_ASSIGNMINUS_ASSIGNleftANDORleftLANLORXORnonassocGTLTGELEEQNEQleftSHLSHRleftPLUSMINUSleftTIMESDIVIDEMODrightINCDECNOTNEGATIONAND ASSIGN COLON COMMA DEC DIVIDE ELSE EQ GE GT ID IF INC INPUT INT LAN LBRACE LBRACKET LE LOR LPAREN LT MAIN MINUS MINUS_ASSIGN MOD NEGATION NEQ NOT NUM OR OUTPUT PLUS PLUS_ASSIGN QUESTION RBRACE RBRACKET RETURN RPAREN SEMI SHL SHR TIMES VOID WHILE XOR\n            program : declarationList\n        \n            declarationList : declarationList declaration\n                            | declaration\n        \n            declaration : varDeclaration\n                        | funDeclaration\n        \n        varDeclaration : typeSpecifier varDeclarationList SEMI\n        \n        varDeclarationList : varDeclarationList COMMA varDeclarationType\n                           | varDeclarationType\n        \n        varDeclarationType : ID\n                           | ID ASSIGN additiveExpression\n                           | ID LBRACKET NUM RBRACKET\n        \n            typeSpecifier : INT\n                          | VOID\n        \n            funDeclaration : typeSpecifier ID LPAREN params RPAREN compoundStmt\n                           | typeSpecifier MAIN LPAREN params RPAREN compoundStmt\n        \n            params : paramList\n                   | VOID\n                   | empty\n        \n            paramList : paramList COMMA param\n                      | param\n        \n            param : typeSpecifier ID\n                  | typeSpecifier ID LBRACKET RBRACKET\n        \n            compoundStmt : LBRACE localDeclarations statementList RBRACE\n        \n            localDeclarations : localDeclarations varDeclaration\n                              | empty\n        \n            statementList : statementList statement\n                          | empty\n        \n            statement : expressionStmt\n                      | compoundStmt\n                      | selectionStmt\n                      | iterationStmt\n                      | returnStmt\n                      | outputStmt\n        \n            expressionStmt : expression SEMI\n                           | SEMI\n        \n            selectionStmt : IF LPAREN expression RPAREN statement\n                          | IF LPAREN expression RPAREN statement ELSE statement\n        \n            iterationStmt : WHILE LPAREN expression RPAREN statement\n        \n            returnStmt : RETURN SEMI\n                       | RETURN expression SEMI\n        \n            outputStmt : OUTPUT LPAREN expression RPAREN SEMI\n        \n            expression : var ASSIGN expression\n                       | simpleExpression\n                       | var PLUS_ASSIGN expression\n                       | var MINUS_ASSIGN expression\n                       | ternaryExpression\n        \n            var : ID\n                | ID LBRACKET expression RBRACKET\n        \n            ternaryExpression : simpleExpression QUESTION logical_expression COLON logical_expression\n        \n            simpleExpression : logical_expression relop logical_expression\n                             | logical_expression\n        \n            relop : GT\n                  | LT\n                  | GE\n                  | LE\n                  | EQ\n                  | NEQ\n        \n            logical_expression : logical_expression logical_op bitwise_expression\n                               | bitwise_expression\n        \n            logical_op : AND\n                  | OR\n        \n            bitwise_expression : bitwise_expression bitwise_op shiftExpression\n                               | shiftExpression\n        \n            bitwise_op : LAN\n                  | LOR\n                  | XOR\n        \n            shiftExpression : shiftExpression shiftop additiveExpression\n                               | additiveExpression\n        \n            shiftop : SHL\n                  | SHR\n        \n            additiveExpression : additiveExpression addop term\n                               | term\n        \n            addop : PLUS\n                  | MINUS\n        \n            term : term mulop factor\n                 | factor\n        \n            mulop : TIMES\n                  | DIVIDE\n                  | MOD\n        \n            factor : LPAREN expression RPAREN\n                   | var\n                   | call\n                   | NUM\n        \n            factor : NOT factor\n                   | INC factor\n                   | DEC factor\n                   | NEGATION factor\n        \n            call : ID LPAREN args RPAREN\n                 | INPUT LPAREN args RPAREN\n        \n            args : argList\n                 | VOID\n                 | empty\n        \n            argList : argList COMMA expression\n                    | expression\n        \n            empty :\n        '
    
_lr_action_items = {'INT':([0,2,3,4,5,9,14,16,19,45,71,72,105,107,108,122,127,],[7,7,-3,-4,-5,-2,-6,7,7,7,-14,-95,-15,7,-25,-24,-23,]),'VOID':([0,2,3,4,5,9,14,16,19,45,47,67,71,72,105,107,108,122,127,],[8,8,-3,-4,-5,-2,-6,25,25,8,77,77,-14,-95,-15,8,-25,-24,-23,]),'$end':([1,2,3,4,5,9,14,71,105,127,],[0,-1,-3,-4,-5,-2,-6,-14,-15,-23,]),'ID':([6,7,8,14,15,17,22,25,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,124,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[11,-12,-13,-6,21,28,43,-13,28,28,28,28,28,28,28,28,-73,-74,28,-77,-78,-79,28,-95,28,28,28,28,28,28,-52,-53,-54,-55,-56,-57,-60,-61,28,-64,-65,-66,28,-69,-70,-95,-25,28,28,-24,-27,21,28,-23,-26,-28,-29,-30,-31,-32,-33,-35,28,-34,28,28,-39,28,-40,28,28,-36,-38,-41,28,-37,]),'MAIN':([6,7,8,],[12,-12,-13,]),'SEMI':([10,11,13,14,20,21,28,29,30,31,33,34,35,56,57,58,59,60,61,62,63,64,65,66,68,72,80,81,82,107,108,109,110,112,113,114,116,117,118,119,120,121,122,123,127,128,129,130,131,132,133,134,135,136,139,141,142,145,146,150,152,153,154,155,156,157,158,159,],[14,-9,-8,-6,-7,-9,-47,-10,-72,-76,-81,-82,-83,-81,-43,-46,-51,-59,-63,-68,-84,-85,-86,-87,-11,-95,-71,-75,-80,-95,-25,-48,-88,-42,-44,-45,-50,-58,-62,-67,-89,136,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,142,-35,145,-49,-34,-39,150,-40,136,136,157,-36,-38,-41,136,-37,]),'COMMA':([10,11,13,20,21,24,27,28,29,30,31,33,34,35,43,56,57,58,59,60,61,62,63,64,65,66,68,73,76,79,80,81,82,106,109,110,112,113,114,116,117,118,119,120,125,141,],[15,-9,-8,-7,-9,45,-20,-47,-10,-72,-76,-81,-82,-83,-21,-81,-43,-46,-51,-59,-63,-68,-84,-85,-86,-87,-11,-19,111,-94,-71,-75,-80,-22,-48,-88,-42,-44,-45,-50,-58,-62,-67,-89,-93,-49,]),'LPAREN':([11,12,14,17,28,32,36,37,38,39,40,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,137,138,139,140,142,143,144,145,147,150,152,153,155,156,157,158,159,],[16,19,-6,32,47,32,32,32,32,32,67,32,32,32,-73,-74,32,-77,-78,-79,32,-95,32,32,32,32,32,32,-52,-53,-54,-55,-56,-57,-60,-61,32,-64,-65,-66,32,-69,-70,-95,-25,32,32,-24,-27,32,-23,-26,-28,-29,-30,-31,-32,-33,-35,143,144,32,147,-34,32,32,-39,32,-40,32,32,-36,-38,-41,32,-37,]),'ASSIGN':([11,21,28,56,109,],[17,17,-47,83,-48,]),'LBRACKET':([11,21,28,43,],[18,18,46,70,]),'RBRACE':([14,72,107,108,121,122,123,127,128,129,130,131,132,133,134,136,142,145,150,155,156,157,159,],[-6,-95,-95,-25,127,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,-36,-38,-41,-37,]),'LBRACE':([14,44,69,72,107,108,121,122,123,127,128,129,130,131,132,133,134,136,142,145,150,152,153,155,156,157,158,159,],[-6,72,72,-95,-95,-25,72,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,72,72,-36,-38,-41,72,-37,]),'IF':([14,72,107,108,121,122,123,127,128,129,130,131,132,133,134,136,142,145,150,152,153,155,156,157,158,159,],[-6,-95,-95,-25,137,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,137,137,-36,-38,-41,137,-37,]),'WHILE':([14,72,107,108,121,122,123,127,128,129,130,131,132,133,134,136,142,145,150,152,153,155,156,157,158,159,],[-6,-95,-95,-25,138,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,138,138,-36,-38,-41,138,-37,]),'RETURN':([14,72,107,108,121,122,123,127,128,129,130,131,132,133,134,136,142,145,150,152,153,155,156,157,158,159,],[-6,-95,-95,-25,139,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,139,139,-36,-38,-41,139,-37,]),'OUTPUT':([14,72,107,108,121,122,123,127,128,129,130,131,132,133,134,136,142,145,150,152,153,155,156,157,158,159,],[-6,-95,-95,-25,140,-24,-27,-23,-26,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,140,140,-36,-38,-41,140,-37,]),'NUM':([14,17,18,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[-6,35,41,35,35,35,35,35,35,35,35,-73,-74,35,-77,-78,-79,35,-95,35,35,35,35,35,35,-52,-53,-54,-55,-56,-57,-60,-61,35,-64,-65,-66,35,-69,-70,-95,-25,35,35,-24,-27,35,-23,-26,-28,-29,-30,-31,-32,-33,-35,35,-34,35,35,-39,35,-40,35,35,-36,-38,-41,35,-37,]),'NOT':([14,17,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[-6,36,36,36,36,36,36,36,36,36,-73,-74,36,-77,-78,-79,36,-95,36,36,36,36,36,36,-52,-53,-54,-55,-56,-57,-60,-61,36,-64,-65,-66,36,-69,-70,-95,-25,36,36,-24,-27,36,-23,-26,-28,-29,-30,-31,-32,-33,-35,36,-34,36,36,-39,36,-40,36,36,-36,-38,-41,36,-37,]),'INC':([14,17,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[-6,37,37,37,37,37,37,37,37,37,-73,-74,37,-77,-78,-79,37,-95,37,37,37,37,37,37,-52,-53,-54,-55,-56,-57,-60,-61,37,-64,-65,-66,37,-69,-70,-95,-25,37,37,-24,-27,37,-23,-26,-28,-29,-30,-31,-32,-33,-35,37,-34,37,37,-39,37,-40,37,37,-36,-38,-41,37,-37,]),'DEC':([14,17,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[-6,38,38,38,38,38,38,38,38,38,-73,-74,38,-77,-78,-79,38,-95,38,38,38,38,38,38,-52,-53,-54,-55,-56,-57,-60,-61,38,-64,-65,-66,38,-69,-70,-95,-25,38,38,-24,-27,38,-23,-26,-28,-29,-30,-31,-32,-33,-35,38,-34,38,38,-39,38,-40,38,38,-36,-38,-41,38,-37,]),'NEGATION':([14,17,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[-6,39,39,39,39,39,39,39,39,39,-73,-74,39,-77,-78,-79,39,-95,39,39,39,39,39,39,-52,-53,-54,-55,-56,-57,-60,-61,39,-64,-65,-66,39,-69,-70,-95,-25,39,39,-24,-27,39,-23,-26,-28,-29,-30,-31,-32,-33,-35,39,-34,39,39,-39,39,-40,39,39,-36,-38,-41,39,-37,]),'INPUT':([14,17,32,36,37,38,39,46,47,48,49,50,51,52,53,54,67,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,111,121,122,123,126,127,128,129,130,131,132,133,134,136,139,142,143,144,145,147,150,152,153,155,156,157,158,159,],[-6,40,40,40,40,40,40,40,40,40,-73,-74,40,-77,-78,-79,40,-95,40,40,40,40,40,40,-52,-53,-54,-55,-56,-57,-60,-61,40,-64,-65,-66,40,-69,-70,-95,-25,40,40,-24,-27,40,-23,-26,-28,-29,-30,-31,-32,-33,-35,40,-34,40,40,-39,40,-40,40,40,-36,-38,-41,40,-37,]),'RPAREN':([16,19,23,24,25,26,27,28,30,31,33,34,35,42,43,47,55,56,57,58,59,60,61,62,63,64,65,66,67,73,75,76,77,78,79,80,81,82,104,106,109,110,112,113,114,116,117,118,119,120,125,141,148,149,151,],[-95,-95,44,-16,-17,-18,-20,-47,-72,-76,-81,-82,-83,69,-21,-95,82,-81,-43,-46,-51,-59,-63,-68,-84,-85,-86,-87,-95,-19,110,-90,-91,-92,-94,-71,-75,-80,120,-22,-48,-88,-42,-44,-45,-50,-58,-62,-67,-89,-93,-49,152,153,154,]),'TIMES':([28,30,31,33,34,35,56,63,64,65,66,80,81,82,109,110,120,],[-47,52,-76,-81,-82,-83,-81,-84,-85,-86,-87,52,-75,-80,-48,-88,-89,]),'DIVIDE':([28,30,31,33,34,35,56,63,64,65,66,80,81,82,109,110,120,],[-47,53,-76,-81,-82,-83,-81,-84,-85,-86,-87,53,-75,-80,-48,-88,-89,]),'MOD':([28,30,31,33,34,35,56,63,64,65,66,80,81,82,109,110,120,],[-47,54,-76,-81,-82,-83,-81,-84,-85,-86,-87,54,-75,-80,-48,-88,-89,]),'PLUS':([28,29,30,31,33,34,35,56,62,63,64,65,66,80,81,82,109,110,119,120,],[-47,49,-72,-76,-81,-82,-83,-81,49,-84,-85,-86,-87,-71,-75,-80,-48,-88,49,-89,]),'MINUS':([28,29,30,31,33,34,35,56,62,63,64,65,66,80,81,82,109,110,119,120,],[-47,50,-72,-76,-81,-82,-83,-81,50,-84,-85,-86,-87,-71,-75,-80,-48,-88,50,-89,]),'PLUS_ASSIGN':([28,56,109,],[-47,84,-48,]),'MINUS_ASSIGN':([28,56,109,],[-47,85,-48,]),'SHL':([28,30,31,33,34,35,56,61,62,63,64,65,66,80,81,82,109,110,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,102,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,102,-67,-89,]),'SHR':([28,30,31,33,34,35,56,61,62,63,64,65,66,80,81,82,109,110,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,103,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,103,-67,-89,]),'LAN':([28,30,31,33,34,35,56,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,98,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,98,-62,-67,-89,]),'LOR':([28,30,31,33,34,35,56,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,99,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,99,-62,-67,-89,]),'XOR':([28,30,31,33,34,35,56,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,100,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,100,-62,-67,-89,]),'GT':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,89,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-58,-62,-67,-89,]),'LT':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,90,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-58,-62,-67,-89,]),'GE':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,91,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-58,-62,-67,-89,]),'LE':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,92,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-58,-62,-67,-89,]),'EQ':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,93,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-58,-62,-67,-89,]),'NEQ':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,94,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-58,-62,-67,-89,]),'AND':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,115,116,117,118,119,120,141,],[-47,-72,-76,-81,-82,-83,-81,95,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,95,95,-58,-62,-67,-89,95,]),'OR':([28,30,31,33,34,35,56,59,60,61,62,63,64,65,66,80,81,82,109,110,115,116,117,118,119,120,141,],[-47,-72,-76,-81,-82,-83,-81,96,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,96,96,-58,-62,-67,-89,96,]),'QUESTION':([28,30,31,33,34,35,56,57,59,60,61,62,63,64,65,66,80,81,82,109,110,116,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-81,86,-51,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,-50,-58,-62,-67,-89,]),'RBRACKET':([28,30,31,33,34,35,41,56,57,58,59,60,61,62,63,64,65,66,70,74,80,81,82,109,110,112,113,114,116,117,118,119,120,141,],[-47,-72,-76,-81,-82,-83,68,-81,-43,-46,-51,-59,-63,-68,-84,-85,-86,-87,106,109,-71,-75,-80,-48,-88,-42,-44,-45,-50,-58,-62,-67,-89,-49,]),'COLON':([28,30,31,33,34,35,60,61,62,63,64,65,66,80,81,82,109,110,115,117,118,119,120,],[-47,-72,-76,-81,-82,-83,-59,-63,-68,-84,-85,-86,-87,-71,-75,-80,-48,-88,126,-58,-62,-67,-89,]),'ELSE':([127,129,130,131,132,133,134,136,142,145,150,155,156,157,159,],[-23,-28,-29,-30,-31,-32,-33,-35,-34,-39,-40,158,-38,-41,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarationList':([0,],[2,]),'declaration':([0,2,],[3,9,]),'varDeclaration':([0,2,107,],[4,4,122,]),'funDeclaration':([0,2,],[5,5,]),'typeSpecifier':([0,2,16,19,45,107,],[6,6,22,22,22,124,]),'varDeclarationList':([6,124,],[10,10,]),'varDeclarationType':([6,15,124,],[13,20,13,]),'params':([16,19,],[23,42,]),'paramList':([16,19,],[24,24,]),'empty':([16,19,47,67,72,107,],[26,26,78,78,108,123,]),'param':([16,19,45,],[27,27,73,]),'additiveExpression':([17,32,46,47,67,83,84,85,86,87,88,97,101,111,121,126,139,143,144,147,152,153,158,],[29,62,62,62,62,62,62,62,62,62,62,62,119,62,62,62,62,62,62,62,62,62,62,]),'term':([17,32,46,47,48,67,83,84,85,86,87,88,97,101,111,121,126,139,143,144,147,152,153,158,],[30,30,30,30,80,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'factor':([17,32,36,37,38,39,46,47,48,51,67,83,84,85,86,87,88,97,101,111,121,126,139,143,144,147,152,153,158,],[31,31,63,64,65,66,31,31,31,81,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'var':([17,32,36,37,38,39,46,47,48,51,67,83,84,85,86,87,88,97,101,111,121,126,139,143,144,147,152,153,158,],[33,56,33,33,33,33,56,56,33,33,56,56,56,56,33,33,33,33,33,56,56,33,56,56,56,56,56,56,56,]),'call':([17,32,36,37,38,39,46,47,48,51,67,83,84,85,86,87,88,97,101,111,121,126,139,143,144,147,152,153,158,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'addop':([29,62,119,],[48,48,48,]),'mulop':([30,80,],[51,51,]),'expression':([32,46,47,67,83,84,85,111,121,139,143,144,147,152,153,158,],[55,74,79,79,112,113,114,125,135,146,148,149,151,135,135,135,]),'simpleExpression':([32,46,47,67,83,84,85,111,121,139,143,144,147,152,153,158,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ternaryExpression':([32,46,47,67,83,84,85,111,121,139,143,144,147,152,153,158,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'logical_expression':([32,46,47,67,83,84,85,86,87,111,121,126,139,143,144,147,152,153,158,],[59,59,59,59,59,59,59,115,116,59,59,141,59,59,59,59,59,59,59,]),'bitwise_expression':([32,46,47,67,83,84,85,86,87,88,111,121,126,139,143,144,147,152,153,158,],[60,60,60,60,60,60,60,60,60,117,60,60,60,60,60,60,60,60,60,60,]),'shiftExpression':([32,46,47,67,83,84,85,86,87,88,97,111,121,126,139,143,144,147,152,153,158,],[61,61,61,61,61,61,61,61,61,61,118,61,61,61,61,61,61,61,61,61,61,]),'compoundStmt':([44,69,121,152,153,158,],[71,105,130,130,130,130,]),'args':([47,67,],[75,104,]),'argList':([47,67,],[76,76,]),'relop':([59,],[87,]),'logical_op':([59,115,116,141,],[88,88,88,88,]),'bitwise_op':([60,117,],[97,97,]),'shiftop':([61,118,],[101,101,]),'localDeclarations':([72,],[107,]),'statementList':([107,],[121,]),'statement':([121,152,153,158,],[128,155,156,159,]),'expressionStmt':([121,152,153,158,],[129,129,129,129,]),'selectionStmt':([121,152,153,158,],[131,131,131,131,]),'iterationStmt':([121,152,153,158,],[132,132,132,132,]),'returnStmt':([121,152,153,158,],[133,133,133,133,]),'outputStmt':([121,152,153,158,],[134,134,134,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarationList','program',1,'p_program_declaration_list','MyParser.py',48),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declaration_list','MyParser.py',64),
  ('declarationList -> declaration','declarationList',1,'p_declaration_list','MyParser.py',65),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','MyParser.py',82),
  ('declaration -> funDeclaration','declaration',1,'p_declaration','MyParser.py',83),
  ('varDeclaration -> typeSpecifier varDeclarationList SEMI','varDeclaration',3,'p_var_declaration','MyParser.py',92),
  ('varDeclarationList -> varDeclarationList COMMA varDeclarationType','varDeclarationList',3,'p_var_declaration_list','MyParser.py',105),
  ('varDeclarationList -> varDeclarationType','varDeclarationList',1,'p_var_declaration_list','MyParser.py',106),
  ('varDeclarationType -> ID','varDeclarationType',1,'p_var_declaration_type','MyParser.py',121),
  ('varDeclarationType -> ID ASSIGN additiveExpression','varDeclarationType',3,'p_var_declaration_type','MyParser.py',122),
  ('varDeclarationType -> ID LBRACKET NUM RBRACKET','varDeclarationType',4,'p_var_declaration_type','MyParser.py',123),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_type_specifier','MyParser.py',143),
  ('typeSpecifier -> VOID','typeSpecifier',1,'p_type_specifier','MyParser.py',144),
  ('funDeclaration -> typeSpecifier ID LPAREN params RPAREN compoundStmt','funDeclaration',6,'p_fun_declaration_type_specifier','MyParser.py',155),
  ('funDeclaration -> typeSpecifier MAIN LPAREN params RPAREN compoundStmt','funDeclaration',6,'p_fun_declaration_type_specifier','MyParser.py',156),
  ('params -> paramList','params',1,'p_params_param_list','MyParser.py',176),
  ('params -> VOID','params',1,'p_params_param_list','MyParser.py',177),
  ('params -> empty','params',1,'p_params_param_list','MyParser.py',178),
  ('paramList -> paramList COMMA param','paramList',3,'p_param_list','MyParser.py',194),
  ('paramList -> param','paramList',1,'p_param_list','MyParser.py',195),
  ('param -> typeSpecifier ID','param',2,'p_param_type_specifier','MyParser.py',211),
  ('param -> typeSpecifier ID LBRACKET RBRACKET','param',4,'p_param_type_specifier','MyParser.py',212),
  ('compoundStmt -> LBRACE localDeclarations statementList RBRACE','compoundStmt',4,'p_compound_stmt_local_declarations','MyParser.py',226),
  ('localDeclarations -> localDeclarations varDeclaration','localDeclarations',2,'p_local_declarations','MyParser.py',240),
  ('localDeclarations -> empty','localDeclarations',1,'p_local_declarations','MyParser.py',241),
  ('statementList -> statementList statement','statementList',2,'p_statement_list','MyParser.py',258),
  ('statementList -> empty','statementList',1,'p_statement_list','MyParser.py',259),
  ('statement -> expressionStmt','statement',1,'p_statement','MyParser.py',275),
  ('statement -> compoundStmt','statement',1,'p_statement','MyParser.py',276),
  ('statement -> selectionStmt','statement',1,'p_statement','MyParser.py',277),
  ('statement -> iterationStmt','statement',1,'p_statement','MyParser.py',278),
  ('statement -> returnStmt','statement',1,'p_statement','MyParser.py',279),
  ('statement -> outputStmt','statement',1,'p_statement','MyParser.py',280),
  ('expressionStmt -> expression SEMI','expressionStmt',2,'p_expression_stmt','MyParser.py',290),
  ('expressionStmt -> SEMI','expressionStmt',1,'p_expression_stmt','MyParser.py',291),
  ('selectionStmt -> IF LPAREN expression RPAREN statement','selectionStmt',5,'p_selection_stmt','MyParser.py',304),
  ('selectionStmt -> IF LPAREN expression RPAREN statement ELSE statement','selectionStmt',7,'p_selection_stmt','MyParser.py',305),
  ('iterationStmt -> WHILE LPAREN expression RPAREN statement','iterationStmt',5,'p_iteration_stmt','MyParser.py',322),
  ('returnStmt -> RETURN SEMI','returnStmt',2,'p_return_stmt','MyParser.py',337),
  ('returnStmt -> RETURN expression SEMI','returnStmt',3,'p_return_stmt','MyParser.py',338),
  ('outputStmt -> OUTPUT LPAREN expression RPAREN SEMI','outputStmt',5,'p_output_stmt','MyParser.py',360),
  ('expression -> var ASSIGN expression','expression',3,'p_expression_var','MyParser.py',373),
  ('expression -> simpleExpression','expression',1,'p_expression_var','MyParser.py',374),
  ('expression -> var PLUS_ASSIGN expression','expression',3,'p_expression_var','MyParser.py',375),
  ('expression -> var MINUS_ASSIGN expression','expression',3,'p_expression_var','MyParser.py',376),
  ('expression -> ternaryExpression','expression',1,'p_expression_var','MyParser.py',377),
  ('var -> ID','var',1,'p_var_id','MyParser.py',401),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_id','MyParser.py',402),
  ('ternaryExpression -> simpleExpression QUESTION logical_expression COLON logical_expression','ternaryExpression',5,'p_ternary_expression','MyParser.py',420),
  ('simpleExpression -> logical_expression relop logical_expression','simpleExpression',3,'p_simple_expression_relop_additive_expression','MyParser.py',434),
  ('simpleExpression -> logical_expression','simpleExpression',1,'p_simple_expression_relop_additive_expression','MyParser.py',435),
  ('relop -> GT','relop',1,'p_relop','MyParser.py',450),
  ('relop -> LT','relop',1,'p_relop','MyParser.py',451),
  ('relop -> GE','relop',1,'p_relop','MyParser.py',452),
  ('relop -> LE','relop',1,'p_relop','MyParser.py',453),
  ('relop -> EQ','relop',1,'p_relop','MyParser.py',454),
  ('relop -> NEQ','relop',1,'p_relop','MyParser.py',455),
  ('logical_expression -> logical_expression logical_op bitwise_expression','logical_expression',3,'p_logical_expression','MyParser.py',466),
  ('logical_expression -> bitwise_expression','logical_expression',1,'p_logical_expression','MyParser.py',467),
  ('logical_op -> AND','logical_op',1,'p_logical_op','MyParser.py',481),
  ('logical_op -> OR','logical_op',1,'p_logical_op','MyParser.py',482),
  ('bitwise_expression -> bitwise_expression bitwise_op shiftExpression','bitwise_expression',3,'p_bitwise_expression','MyParser.py',493),
  ('bitwise_expression -> shiftExpression','bitwise_expression',1,'p_bitwise_expression','MyParser.py',494),
  ('bitwise_op -> LAN','bitwise_op',1,'p_bitwise_op','MyParser.py',508),
  ('bitwise_op -> LOR','bitwise_op',1,'p_bitwise_op','MyParser.py',509),
  ('bitwise_op -> XOR','bitwise_op',1,'p_bitwise_op','MyParser.py',510),
  ('shiftExpression -> shiftExpression shiftop additiveExpression','shiftExpression',3,'p_shiftExpression_shiftop_additiveExpression','MyParser.py',521),
  ('shiftExpression -> additiveExpression','shiftExpression',1,'p_shiftExpression_shiftop_additiveExpression','MyParser.py',522),
  ('shiftop -> SHL','shiftop',1,'p_shiftop','MyParser.py',536),
  ('shiftop -> SHR','shiftop',1,'p_shiftop','MyParser.py',537),
  ('additiveExpression -> additiveExpression addop term','additiveExpression',3,'p_additive_expression_addop_term','MyParser.py',547),
  ('additiveExpression -> term','additiveExpression',1,'p_additive_expression_addop_term','MyParser.py',548),
  ('addop -> PLUS','addop',1,'p_addop','MyParser.py',562),
  ('addop -> MINUS','addop',1,'p_addop','MyParser.py',563),
  ('term -> term mulop factor','term',3,'p_term_mulop_factor','MyParser.py',573),
  ('term -> factor','term',1,'p_term_mulop_factor','MyParser.py',574),
  ('mulop -> TIMES','mulop',1,'p_mulop','MyParser.py',588),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','MyParser.py',589),
  ('mulop -> MOD','mulop',1,'p_mulop','MyParser.py',590),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','MyParser.py',600),
  ('factor -> var','factor',1,'p_factor','MyParser.py',601),
  ('factor -> call','factor',1,'p_factor','MyParser.py',602),
  ('factor -> NUM','factor',1,'p_factor','MyParser.py',603),
  ('factor -> NOT factor','factor',2,'p_factor_unary','MyParser.py',625),
  ('factor -> INC factor','factor',2,'p_factor_unary','MyParser.py',626),
  ('factor -> DEC factor','factor',2,'p_factor_unary','MyParser.py',627),
  ('factor -> NEGATION factor','factor',2,'p_factor_unary','MyParser.py',628),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','MyParser.py',639),
  ('call -> INPUT LPAREN args RPAREN','call',4,'p_call','MyParser.py',640),
  ('args -> argList','args',1,'p_args','MyParser.py',661),
  ('args -> VOID','args',1,'p_args','MyParser.py',662),
  ('args -> empty','args',1,'p_args','MyParser.py',663),
  ('argList -> argList COMMA expression','argList',3,'p_arg_list','MyParser.py',677),
  ('argList -> expression','argList',1,'p_arg_list','MyParser.py',678),
  ('empty -> <empty>','empty',0,'p_empty','MyParser.py',701),
]
